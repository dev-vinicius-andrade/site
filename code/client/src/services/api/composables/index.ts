/* This file was generated by openapi-client-generator */
/* Do not modify this file manually */
/* Any changes will be overwritten */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */
import axios, { AxiosInstance } from "axios";
import { InternalAxiosRequestConfig } from "axios";

// #region Type Declarations
declare type Nullable<T> = T | null | undefined;

export declare type AxiosBearerTokenInterceptorResult =
  | {
      isAuthenticated: true;
      token: string;
    }
  | {
      isAuthenticated: false;
    };

export declare type AxiosAuthenticationrequestInterceptor = (
  value: InternalAxiosRequestConfig<any>
) => InternalAxiosRequestConfig<any> | Promise<InternalAxiosRequestConfig<any>>;

export declare type CreateApiOptions<TConfiguration> = {
  addAuthenticationInterceptor?: boolean;
  configuration?: TConfiguration;
  axios?: AxiosInstance;
  authenticationInterceptor?: AxiosAuthenticationrequestInterceptor;
};

export declare type ApiTypeConstructor<TApi, TConfiguration> = new (
  configuration?: TConfiguration,
  basePath?: string,
  axios?: AxiosInstance
) => TApi;

export declare type ApiBuilderOfResult<TApi> = ApiBuilderResult<TApi>;

export declare type ApiBuilderResult<TResult> = {
  createAuthorizedApi: () => TResult;
  createUnauthorizedApi: () => TResult;
};
// #endregion Type Declarations
// #region Functions
export async function useAxiosBearerTokenInterceptorAsync(
  getToken?: Nullable<() => Promise<AxiosBearerTokenInterceptorResult>>
) {
  return async (
    config: InternalAxiosRequestConfig<any>
  ): Promise<InternalAxiosRequestConfig<any>> => {
    if (!getToken) return config;
    const result = await getToken();
    if (!result.isAuthenticated) return config;
    if (!result.token) return config;
    if (!config.headers) return config;
    config.headers.Authorization = `Bearer ${result.token}`;
    return config;
  };
}

export function useAxiosBearerTokenInterceptorSync(
  getToken?: Nullable<() => AxiosBearerTokenInterceptorResult>
) {
  return (
    config: InternalAxiosRequestConfig<any>
  ): InternalAxiosRequestConfig<any> => {
    if (!getToken) return config;
    const result = getToken();
    if (!result?.isAuthenticated) return config;
    if (!result?.token) return config;
    if (!config.headers) return config;
    config.headers.Authorization = `Bearer ${result.token}`;
    return config;
  };
}

export function createAxios(
  baseUrl?: string,
  options: {
    authenticationInterceptor?: AxiosAuthenticationrequestInterceptor;
  } = {}
): AxiosInstance {
  const instance = axios.create({
    baseURL: baseUrl,
  });
  if (!options.authenticationInterceptor) return instance;
  instance.interceptors.request.use(options.authenticationInterceptor);
  return instance;
}

export function useUrlBuilder(...paths: string[]) {
  return paths
    .filter((path) => !!path)
    .map((path) => (path?.endsWith("/") ? path.slice(0, -1) : path))
    .join("/");
}

export function useApiBuilderOf<TApi, TConfiguration>(
  type: ApiTypeConstructor<TApi, TConfiguration>,
  baseUrl?: string,
  authenticationInterceptor?: AxiosAuthenticationrequestInterceptor
): ApiBuilderOfResult<TApi> {
  if (!baseUrl) throw new Error("baseUrl is not defined");
  const apis = (
    options: {
      authenticationInterceptor?: AxiosAuthenticationrequestInterceptor;
    } = {}
  ) => {
    return {
      api: createApi(type, useUrlBuilder(baseUrl), options),
    };
  };
  return {
    createAuthorizedApi: () => {
      if (
        !authenticationInterceptor ||
        typeof authenticationInterceptor !== "function"
      )
        throw new Error("authenticationInterceptor is not defined");
      return apis({ authenticationInterceptor }).api;
    },
    createUnauthorizedApi: () => apis().api,
  } as ApiBuilderOfResult<TApi>;
}

export function createApi<TApi, TConfiguration>(
  type: ApiTypeConstructor<TApi, TConfiguration>,
  baseUrl?: string,
  options?: CreateApiOptions<TConfiguration>
): TApi {
  const instance = new type(
    options?.configuration,
    baseUrl,
    createAxios(baseUrl, {
      authenticationInterceptor: options?.authenticationInterceptor,
    })
  );
  return instance;
}
// #endregion Functions
